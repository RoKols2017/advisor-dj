name: CI/CD

on:
  push:
    branches:
      - master
      - develop
    paths:
      - '**.py'
      - '**.toml'
      - '**.md'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/ci.yml'
      - 'requirements.txt'
  pull_request:
    branches:
      - master
      - develop
    paths:
      - '**.py'
      - '**.toml'
      - '**.md'
      - 'Dockerfile*'
      - 'docker-compose.yml'
      - '.github/workflows/ci.yml'
      - 'requirements.txt'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint_and_type_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff (Linting)
        run: ruff check .
      - name: Run Black (Formatting Check)
        run: black --check .
      - name: Run MyPy (Type Checking)
        run: mypy .

  test_sqlite:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests with SQLite
        env:
          DJANGO_SETTINGS_MODULE: config.settings.test
        run: pytest --cov=. --cov-report=xml --cov-fail-under=80
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  test_postgresql:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          for i in $(seq 1 10); do
            pg_isready -h localhost -p 5432 -U test_user && break
            sleep 5
          done
          pg_isready -h localhost -p 5432 -U test_user
      - name: Run tests with PostgreSQL
        env:
          DJANGO_SETTINGS_MODULE: config.settings.test
          DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
        run: |
          python manage.py migrate
          pytest --cov=. --cov-report=xml --cov-fail-under=80

  pip_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      - name: Run pip-audit
        run: pip-audit --desc --format=json --output=pip-audit-report.json
      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  build_images:
    runs-on: ubuntu-latest
    needs: [lint_and_type_check, test_sqlite, test_postgresql, pip_audit]
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}-web
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push watcher image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.watcher
          push: true
          tags: ${{ steps.meta.outputs.tags }}-watcher
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  compose_smoke:
    runs-on: ubuntu-latest
    needs: [build_images]
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file
        run: |
          cat > .env << EOF
          DEBUG=0
          SECRET_KEY=test-secret-key-for-ci
          ALLOWED_HOSTS=localhost,127.0.0.1
          DATABASE_URL=postgres://advisor:advisor@db:5432/advisor
          POSTGRES_DB=advisor
          POSTGRES_USER=advisor
          POSTGRES_PASSWORD=advisor
          LOG_TO_FILE=1
          LOG_TO_CONSOLE=0
          LOG_DIR=/app/logs
          LOG_FILE_NAME=project.log
          WATCHER_LOG_FILE_NAME=print_events_watcher.log
          PRINT_EVENTS_WATCH_DIR=/app/data/watch
          PRINT_EVENTS_PROCESSED_DIR=/app/data/processed
          PRINT_EVENTS_QUARANTINE_DIR=/app/data/quarantine
          IMPORT_TOKEN=test-import-token
          ENABLE_WINDOWS_AUTH=0
          WEB_PORT=8000
          EOF
      - name: Start Docker Compose stack
        run: |
          docker compose up -d
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 5; done'
      - name: Run smoke tests
        run: |
          chmod +x scripts/smoke.sh
          ./scripts/smoke.sh
      - name: Show service logs on failure
        if: failure()
        run: |
          echo "=== Web service logs ==="
          docker compose logs web
          echo "=== Watcher service logs ==="
          docker compose logs watcher
          echo "=== Database service logs ==="
          docker compose logs db
      - name: Cleanup
        if: always()
        run: docker compose down -v